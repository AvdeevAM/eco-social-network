{"version":3,"file":"static/js/509.fa1d110c.chunk.js","mappings":"yPAIIA,EAAkB,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACxCC,EADuC,0IAE3C,WACE,OAAKC,KAAKC,MAAMN,QAGT,SAACG,GAAD,UAAeE,KAAKC,SAFlB,SAAC,KAAD,CAAUC,GAAG,eAJmB,GACbC,EAAAA,WAUhC,OADEC,EAAAA,EAAAA,IAAQX,EAARW,CAAyBL,K,qJCjB7B,GAAgB,WAAa,4BAA4B,MAAQ,wBCAjE,EAAuB,mB,SCcvB,EAZa,SAACE,GACZ,OACE,iBAAKI,UAAWC,EAAhB,WACE,gBAAKC,IAAI,wDAAwDC,IAAI,KACpEP,EAAMQ,SACP,0BACE,oCAAYR,EAAMS,oB,mBCwBpBC,EAAgB,SAACV,GACrB,OACE,SAAC,KAAD,CACEW,SAAUX,EAAMY,QAChBC,cAAe,GACfC,iBAAkBd,EAAMe,WAH1B,SAKG,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,OAA1C,OACC,UAAC,KAAD,CAAMT,SAAUK,EAAcZ,UAAWC,EAAAA,WAAzC,WACE,4BACE,SAAC,KAAD,CACEgB,UAAU,WACVC,YAAY,gBACZC,KAAK,gBAENJ,EAAQK,aAAeJ,EAAOI,cAC7B,cAAGpB,UAAWC,EAAAA,MAAd,SAAwBe,EAAOI,kBAGnC,0BACE,mBAAQC,UAAWR,IAAYC,EAAOQ,KAAK,SAA3C,+BAUZ,EAzDgB,SAAC1B,GACf,IAAI2B,EAAgB3B,EAAM4B,MAAMC,KAAI,SAACC,GAAD,OAClC,SAAC,EAAD,CAAMtB,QAASsB,EAAEtB,QAASC,WAAYqB,EAAErB,YAAiBqB,EAAEC,OAOvDhB,EAAaiB,EAAAA,KAAaC,MAAM,CACpCT,YAAaQ,EAAAA,KAEVE,IAAI,GAAI,uBACRC,SAAS,+BAGd,OACE,iBAAK/B,UAAWC,EAAAA,WAAhB,WACE,sCACA,0BACE,SAACK,EAAD,CAAeE,QAfL,SAACwB,GACfpC,EAAMY,QAAQwB,EAAOZ,cAcgBT,WAAYA,OAE/C,gBAAKX,UAAWC,EAAAA,MAAhB,SAA0BsB,QCNhC,GAFyBxB,EAAAA,EAAAA,KAdD,SAACV,GACvB,MAAO,CACLmC,MAAOnC,EAAM4C,YAAYT,UAIF,SAACU,GAC1B,MAAO,CACL1B,QAAS,SAAC2B,GACRD,GAASE,EAAAA,EAAAA,IAAqBD,QAKXpC,CAA6CsC,G,mBCnBtE,GAAgB,iBAAmB,sCAAsC,SAAW,8BAA8B,eAAiB,oCAAoC,aAAe,kCAAkC,MAAQ,4B,oBC8ChO,EA5C+B,SAACzC,GAC9B,OAA8B0C,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS1C,EAAM6C,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAU9C,EAAM6C,UACf,CAAC7C,EAAM6C,SAeV,OACE,4BACA,kCADA,KAEIF,IACA,0BACE,iBAAMK,cAlBW,WACvBJ,GAAY,IAiBN,SACG5C,EAAM6C,QAAU,qBAItBF,IACC,0BACE,kBACEM,SAjBa,SAACC,GACtBJ,EAAUI,EAAEC,cAAcC,QAiBlBC,WAAW,EACXC,OAxBiB,WACzBV,GAAY,GACZ5C,EAAMuD,aAAaV,IAuBXO,MAAOP,U,UC9BnB,EARgB,SAAC,GAAmC,IAAjCW,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACE,4BACE,uBAAID,IADN,KACyBC,M,UCyG7B,EAzG4B,SAACzD,GAC3B,IAAM0D,EAA4B1B,EAAAA,KAAaC,MAAM,CACnD0B,SAAU3B,EAAAA,KAEP4B,IAAI,EAAG,cACP1B,IAAI,GAAI,aACRC,SAAS,YACZ0B,QAAS7B,EAAAA,KAEN4B,IAAI,EAAG,cACP1B,IAAI,GAAI,aACRC,SAAS,YACZ2B,SAAU9B,EAAAA,GAAW,CACnB+B,SAAU/B,EAAAA,KAEP4B,IAAI,EAAG,cACPzB,SAAS,YACZ6B,QAAShC,EAAAA,KAEN4B,IAAI,EAAG,cACPzB,SAAS,YACZ8B,GAAIjC,EAAAA,KAED4B,IAAI,EAAG,cACPzB,SAAS,YACV+B,QAASlC,EAAAA,KAER4B,IAAI,EAAG,cACPzB,SAAS,YACVgC,UAAWnC,EAAAA,KAEV4B,IAAI,EAAG,cACPzB,SAAS,YACViC,QAASpC,EAAAA,KAER4B,IAAI,EAAG,cACPzB,SAAS,YACVkC,OAAQrC,EAAAA,KAEP4B,IAAI,EAAG,cACPzB,SAAS,YACVmC,SAAUtC,EAAAA,KAET4B,IAAI,EAAG,cACPzB,SAAS,gBAGhB,OACE,SAAC,KAAD,CACExB,SAAUX,EAAMuE,oBAChB1D,eAAa,UACRb,EAAMwE,SAEX1D,iBAAkB4C,EALpB,SAOG,SAACe,GAAD,OACC,UAAC,KAAD,CAAM9D,SAAU8D,EAAOzD,aAAvB,UACGyD,EAAO5B,QACR,0BACE,mBAAQnB,KAAM,SAAd,qBAEF,iBAAKtB,UAAWC,EAAAA,SAAhB,WACE,qCADF,MACqBqE,EAAAA,EAAAA,IAAY,QAAS,WAAY,aACnDD,EAAOrD,OAAOuC,WACb,cAAGvD,UAAWC,EAAAA,MAAd,SAAwBoE,EAAOrD,OAAOuC,eAG1C,iBAAKvD,UAAWC,EAAAA,QAAhB,WACE,oCADF,MACoBqE,EAAAA,EAAAA,IAAY,QAAS,UAAW,YACjDD,EAAOrD,OAAOyC,UACb,cAAGzD,UAAWC,EAAAA,MAAd,SAAwBoE,EAAOrD,OAAOyC,cAG1C,oCAjBF,KAkBE,gBAAKzD,UAAWC,EAAAA,SAAhB,SACGsE,OAAOC,KAAK5E,EAAMwE,QAAQV,UAAUjC,KAAI,SAACgD,GAAS,IAAD,IAChD,OACE,2BACGA,EADH,MACUH,EAAAA,EAAAA,IAAY,QAAS,YAAcG,EAAKA,IAC/C,UAAAJ,EAAOrD,OAAO0C,gBAAd,eAAyBe,MACxB,cAAGzE,UAAWC,EAAAA,MAAd,mBAAwBoE,EAAOrD,OAAO0C,gBAAtC,aAAwB,EAAyBe,OAH3CA,SAShB,iBAAKzE,UAAWC,EAAAA,eAAhB,WACE,yDACCqE,EAAAA,EAAAA,IAAY,QAAS,iBAAkB,KAAM,CAAEhD,KAAM,iBAExD,iBAAKtB,UAAWC,EAAAA,0BAAhB,WACE,2CADF,IAC0B,KACvBqE,EAAAA,EAAAA,IACC,QACA,4BACA,4CAEF,cAAGtE,UAAWC,EAAAA,MAAd,SAAwBoE,EAAOrD,OAAO0D,sCCzC5CC,EAAkB,SAAC/E,GACvB,OACE,2BACGA,EAAMgF,UACL,0BACE,mBAAQC,QAASjF,EAAMkF,iBAAvB,qBAGJ,iBAAK9E,UAAWC,EAAAA,QAAhB,WACE,oCADF,KACoBL,EAAMwE,QAAQX,YAElC,oCATF,KAUE,gBAAKzD,UAAWC,EAAAA,SAAhB,SACGsE,OAAOC,KAAK5E,EAAMwE,QAAQV,UAAUjC,KAAI,SAACgD,GACxC,OACE,SAAC,EAAD,CAEErB,YAAaqB,EACbpB,aAAczD,EAAMwE,QAAQV,SAASe,IAFhCA,SAOb,iBAAKzE,UAAWC,EAAAA,eAAhB,WACE,yDACA,gBACEC,KAAsC,IAAjCN,EAAMwE,QAAQW,eAA0BC,EAAYC,EACzD9E,IAAI,QAGPP,EAAMwE,QAAQW,iBACb,iBAAK/E,UAAWC,EAAAA,0BAAhB,WACE,2CADF,KAC2BL,EAAMwE,QAAQM,iCAOjD,EA1FoB,SAAC9E,GACnB,OAA8B0C,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KASA,IAAK5C,EAAMwE,QACT,OAAO,SAACc,EAAA,EAAD,IAQT,OACE,iBAAKlF,UAAWC,EAAAA,iBAAhB,WACE,0BACE,wBAAKL,EAAMwE,QAAQb,cAErB,gBACEvD,UAAWC,EAAAA,aACXC,IAAKN,EAAMwE,QAAQe,OAAOC,OAASC,EACnClF,IAAI,KAELP,EAAMgF,UAAW,kBAAOtD,KAAK,OAAOuB,SAfjB,SAACC,GACnBA,EAAEwC,OAAOC,MAAMC,QACjB5F,EAAM6F,UAAU3C,EAAEwC,OAAOC,MAAM,QAc/B,SAAC,EAAD,CACE9C,OAAQ7C,EAAM6C,OACdU,aAAcvD,EAAMuD,eAErBZ,GACC,SAAC,GAAD,kBACM3C,GADN,IAEEuE,oBAlCoB,SAACnC,EAAQ0D,GACnC9F,EAAM+F,SAAS3D,EAAQ0D,EAAYE,cAAeF,EAAYhD,WAC9DgD,EAAYE,eAAc,GAE1BpD,GAAY,QAiCR,SAACmC,GAAD,kBACM/E,GADN,IAEEkF,iBAAkB,WAChBtC,GAAY,WCjCxB,EAhBgB,SAAC5C,GACf,OACE,4BACE,SAAC,EAAD,CACE+F,SAAU/F,EAAM+F,SAChBf,QAAShF,EAAMgF,QACfa,UAAW7F,EAAM6F,UACjBrB,QAASxE,EAAMwE,QACf3B,OAAQ7C,EAAM6C,OACdU,aAAcvD,EAAMuD,gBAEtB,SAAC,EAAD,Q,8BCDA0C,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAsCH,OAtCGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MACJ,WACE,IAAIC,EACqB,OAArBnG,KAAKC,MAAMmG,QACbD,EAASnG,KAAKC,MAAMmG,MAAMC,OAAOF,QAAUnG,KAAKC,MAAMqG,kBAEnDH,IACHA,EAASnG,KAAKC,MAAMqG,mBAElBtG,KAAKC,MAAMsG,QAAQC,KAAK,UAG5BxG,KAAKC,MAAMwG,eAAeN,GAC1BnG,KAAKC,MAAMyG,cAAcP,KAC1B,+BAED,WACEnG,KAAK2G,mBACN,gCAED,SAAmBC,GACbA,EAAUR,QAAUpG,KAAKC,MAAMmG,OACjCpG,KAAK2G,mBAER,oBAED,WACE,OACE,SAAC,GAAD,kBACM3G,KAAKC,OADX,IAEE+F,SAAUhG,KAAKC,MAAM+F,SACrBf,SAAUjF,KAAKC,MAAMmG,MACrB3B,QAASzE,KAAKC,MAAMwE,QACpB3B,OAAQ9C,KAAKC,MAAM6C,OACnBU,aAAcxD,KAAKC,MAAMuD,aACzBsC,UAAW9F,KAAKC,MAAM6F,iBAG3B,EAtCGI,CAAyB/F,EAAAA,WAgD/B,GAAe0G,EAAAA,EAAAA,KACbzG,EAAAA,EAAAA,KARoB,SAACV,GAAD,MAAY,CAChC+E,QAAS/E,EAAM4C,YAAYmC,QAC3B3B,OAAQpD,EAAM4C,YAAYQ,OAC1BnD,OAAQD,EAAME,KAAKD,OACnB2G,iBAAkB5G,EAAME,KAAKuG,UAIJ,CACvBM,eAAAA,EAAAA,GACAC,cAAAA,EAAAA,GACAlD,aAAAA,EAAAA,GACAsC,UAAAA,EAAAA,GACAE,SAAAA,EAAAA,KAEFc,EAAAA,EACAjH,EAAAA,EATF,CAUEqG,I","sources":["HOC/WithAuthRedirect.jsx","webpack://eco-social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://eco-social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://eco-social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/Contact.jsx","components/Profile/ProfileInfo/ProfileInfoDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Navigate to=\"/login\" />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  let ConnectedAuthRedirectComponent =\r\n    connect(mapStateToProps)(RedirectComponent);\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__v3+cd\",\"posts\":\"MyPosts_posts__vpq1W\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__gptSG\"};","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://cdn-icons-png.flaticon.com/512/147/147142.png\" alt=\"\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nconst MyPosts = (props) => {\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post message={p.message} likesCount={p.likesCount} key={p.id} />\r\n  ));\r\n\r\n  const addPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  const postSchema = yup.object().shape({\r\n    newPostText: yup\r\n      .string()\r\n      .max(10, \"Message is too long\")\r\n      .required(\"Type text to send message\"),\r\n  });\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <FormikProfile addPost={addPost} postSchema={postSchema} />\r\n      </div>\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FormikProfile = (props) => {\r\n  return (\r\n    <Formik\r\n      onSubmit={props.addPost}\r\n      initialValues={{}}\r\n      validationSchema={props.postSchema}\r\n    >\r\n      {({ handleSubmit, isValid, dirty, touched, errors }) => (\r\n        <Form onSubmit={handleSubmit} className={s.newMessage}>\r\n          <div>\r\n            <Field\r\n              component=\"textarea\"\r\n              placeholder=\"Type new post\"\r\n              name=\"newPostText\"\r\n            />\r\n            {touched.newPostText && errors.newPostText && (\r\n              <p className={s.error}>{errors.newPostText}</p>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <button disabled={!isValid && !dirty} type=\"submit\">\r\n              Add post\r\n            </button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  addPostActionCreator,\r\n} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (text) => {\r\n      dispatch(addPostActionCreator(text));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XH+mM\",\"contacts\":\"ProfileInfo_contacts__EHL5j\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__eXd3+\",\"profilePhoto\":\"ProfileInfo_profilePhoto__XFo7Q\",\"error\":\"ProfileInfo_error__DbbRi\"};","import React, { useEffect, useState } from \"react\";\r\n// import s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <b>Status</b>:\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"--------------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\n\r\nconst Contact = ({ contactName, contactValue }) => {\r\n  return (\r\n    <div>\r\n      <b>{contactName}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport { createField } from \"../../../utils/FormControls\";\r\n\r\nconst ProfileInfoDataForm = (props) => {\r\n  const profileInfoDataFormSchema = yup.object().shape({\r\n    fullName: yup\r\n      .string()\r\n      .min(3, \"Too Short!\")\r\n      .max(25, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    aboutMe: yup\r\n      .string()\r\n      .min(3, \"Too Short!\")\r\n      .max(35, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    contacts: yup.object({\r\n      facebook: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n      website: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n      vk: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n        twitter: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n        instagram: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n        youtube: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n        github: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),\r\n        mainLink: yup\r\n        .string()\r\n        .min(3, \"Too Short!\")\r\n        .required(\"Required\"),  \r\n    }),\r\n  });\r\n  return (\r\n    <Formik\r\n      onSubmit={props.saveProfileInfoData}\r\n      initialValues={{\r\n        ...props.profile,\r\n      }}\r\n      validationSchema={profileInfoDataFormSchema}\r\n    >\r\n      {(formik) => (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n          {formik.status}\r\n          <div>\r\n            <button type={\"submit\"}>Save</button>\r\n          </div>\r\n          <div className={s.fullName}>\r\n            <b>Full name</b>: {createField(\"input\", \"fullName\", \"Full name\")}\r\n            {formik.errors.fullName && (\r\n              <p className={s.error}>{formik.errors.fullName}</p>\r\n            )}\r\n          </div>\r\n          <div className={s.aboutMe}>\r\n            <b>About me</b>: {createField(\"input\", \"aboutMe\", \"About me\")}\r\n            {formik.errors.aboutMe && (\r\n              <p className={s.error}>{formik.errors.aboutMe}</p>\r\n            )}\r\n          </div>\r\n          <b>Contacts</b>:\r\n          <div className={s.contacts}>\r\n            {Object.keys(props.profile.contacts).map((key) => {\r\n              return (\r\n                <div key={key}>\r\n                  {key}: {createField(\"input\", \"contacts.\" + key, key)}\r\n                  {formik.errors.contacts?.[key] && (\r\n                    <p className={s.error}>{formik.errors.contacts?.[key]}</p>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className={s.lookingForAJob}>\r\n            <b>Looking for a job right now:</b>\r\n            {createField(\"input\", \"lookingForAJob\", null, { type: \"checkbox\" })}\r\n          </div>\r\n          <div className={s.lookingForAJobDescription}>\r\n            <b>Job description</b>:{\" \"}\r\n            {createField(\r\n              \"input\",\r\n              \"lookingForAJobDescription\",\r\n              \"Describe the job you are looking for...\"\r\n            )}\r\n            <p className={s.error}>{formik.errors.lookingForAJobDescription}</p>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default ProfileInfoDataForm;\r\n","import React, { useState } from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport symbolYes from \"./../../../assets/images/symbol_yes.png\";\r\nimport symbolNo from \"./../../../assets/images/symbol_no.png\";\r\nimport ProfileStatusWithHooK from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/default_avatar_small.png\";\r\nimport Contact from \"./Contact\";\r\nimport ProfileInfoDataForm from \"./ProfileInfoDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  const saveProfileInfoData = (values, submitProps) => {\r\n    props.saveData(values, submitProps.setSubmitting, submitProps.setStatus);\r\n    submitProps.setSubmitting(true);\r\n\r\n    setEditMode(false);\r\n  };\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <div className={s.descriptionBlock}>\r\n      <div>\r\n        <h2>{props.profile.fullName}</h2>\r\n      </div>\r\n      <img\r\n        className={s.profilePhoto}\r\n        src={props.profile.photos.large || userPhoto}\r\n        alt=\"\"\r\n      />\r\n      {props.isOwner && <input type=\"file\" onChange={onPhotoSelected} />}\r\n      <ProfileStatusWithHooK\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      {editMode ? (\r\n        <ProfileInfoDataForm\r\n          {...props}\r\n          saveProfileInfoData={saveProfileInfoData}\r\n        />\r\n      ) : (\r\n        <ProfileInfoData\r\n          {...props}\r\n          switchOnEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileInfoData = (props) => {\r\n  return (\r\n    <div>\r\n      {props.isOwner && (\r\n        <div>\r\n          <button onClick={props.switchOnEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n      <div className={s.aboutMe}>\r\n        <b>About me</b>: {props.profile.aboutMe}\r\n      </div>\r\n      <b>Contacts</b>:\r\n      <div className={s.contacts}>\r\n        {Object.keys(props.profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactName={key}\r\n              contactValue={props.profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div className={s.lookingForAJob}>\r\n        <b>Looking for a job right now:</b>\r\n        <img\r\n          src={props.profile.lookingForAJob === true ? symbolYes : symbolNo}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      {props.profile.lookingForAJob && (\r\n        <div className={s.lookingForAJobDescription}>\r\n          <b>Job description</b>: {props.profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        saveData={props.saveData}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveData,\r\n} from \"./../../redux/profileReducer\";\r\nimport { WithAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { WithRouter } from \"../../HOC/WithRouter\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId;\r\n    if (this.props.match !== null) {\r\n      userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n    }\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.match !== this.props.match) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        saveData={this.props.saveData}\r\n        isOwner={!this.props.match}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  isAuth: state.auth.isAuth,\r\n  authorizedUserId: state.auth.userId,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveData,\r\n  }),\r\n  WithRouter,\r\n  WithAuthRedirect\r\n)(ProfileContainer);\r\n"],"names":["mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","className","s","src","alt","message","likesCount","FormikProfile","onSubmit","addPost","initialValues","validationSchema","postSchema","handleSubmit","isValid","dirty","touched","errors","component","placeholder","name","newPostText","disabled","type","postsElements","posts","map","p","id","yup","shape","max","required","values","profilePage","dispatch","text","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","contactName","contactValue","profileInfoDataFormSchema","fullName","min","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","saveProfileInfoData","profile","formik","createField","Object","keys","key","lookingForAJobDescription","ProfileInfoData","isOwner","onClick","switchOnEditMode","lookingForAJob","symbolYes","symbolNo","Preloader","photos","large","userPhoto","target","files","length","savePhoto","submitProps","saveData","setSubmitting","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","compose","WithRouter"],"sourceRoot":""}