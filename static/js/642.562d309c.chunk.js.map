{"version":3,"file":"static/js/642.562d309c.chunk.js","mappings":"sNACA,G,QAA0B,0BAA1B,EAAyE,qCAAzE,EAA6H,8BAA7H,EAA2K,+BAA3K,EAAmN,wBAAnN,EAAyP,6BAAzP,EAAoS,6BAApS,EAAmV,iCAAnV,EAAiY,4BAAjY,EAAqa,uB,gDCwBra,EApBgB,SAACA,GACf,IAAIC,EAASD,EAAME,QAAQC,OACvBH,EAAMI,UACJJ,EAAMI,UACNC,EACF,wDACJ,OACE,iBACEC,UAAWC,GAAAA,EAAG,UAETC,GAAyC,IAAzBR,EAAME,QAAQC,QAEjCK,GALJ,WAQE,gBAAKC,IAAKR,EAAQS,IAAI,MACtB,gBAAKJ,UAAWE,EAAhB,SAAoCR,EAAME,QAAQA,cCpBxD,EAAyB,6BAAzB,EAA+D,6B,UCsB/D,EAnBmB,SAACF,GAClB,IAAIW,EAAO,YAAcX,EAAMY,GAC/B,OACE,UAAC,KAAD,CACEC,GAAIF,EACJL,UAAW,SAACQ,GAAD,OACTA,EAAQC,SAAWP,EAAW,IAAMA,EAAWA,EAAW,KAH9D,WAME,gBAAKC,IAAI,wDAAwDC,IAAI,MACrE,yBACGV,EAAMgB,KAAKC,OAAS,GACjBjB,EAAMgB,KAAKE,UAAU,EAAG,IAAM,MAC9BlB,EAAMgB,W,6BCiCZG,EAAgB,SAACnB,GACrB,OACE,SAAC,KAAD,CACEoB,SAAUpB,EAAMqB,cAChBC,cAAe,CACbC,eAAgB,IAElBC,iBAAkBxB,EAAMyB,cAL1B,SAOG,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,OAAjC,OACC,UAAC,KAAD,CAAMT,SAAUM,EAAcpB,UAAWE,EAAzC,WACE,4BACE,SAAC,KAAD,CACEsB,UAAU,WACVd,KAAK,iBACLe,YAAY,uBAEbF,EAAON,iBACN,cAAGjB,UAAWE,EAAd,SAAwBqB,EAAON,qBAGlCS,EAAAA,EAAAA,GAAa,KAAM,eAAgB,SAAU,CAC5CC,WAAYN,GAAWC,YAQnC,EAxEgB,SAAC5B,GACf,IAAIkC,EAAkBlC,EAAMmC,aAAaC,QAAQC,KAAI,SAACC,GAAD,OACnD,SAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMJ,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAEzC2B,EAAmBvC,EAAMmC,aAAaK,SAASH,KAAI,SAACI,GAAD,OACrD,SAAC,EAAD,CAASvC,QAASuC,EAAcrC,UAAWJ,EAAMI,WAAvBqC,EAAE7B,OAYxBa,EAAgBiB,EAAAA,KAAaC,MAAM,CACvCpB,eAAgBmB,EAAAA,KAEbE,IAAI,EAAG,6BACPC,IAAI,GAAI,kDAGb,OACE,iBAAKvC,UAAWE,EAAhB,WACE,gBAAKF,UAAWE,EAAhB,UACE,gBAAKF,UAAWE,EAAhB,SAAiC0B,OAEnC,iBAAK5B,UAAWE,EAAhB,WACE,gBAAKF,UAAWE,EAAhB,SAA2B+B,KAC3B,0BACE,SAACpB,EAAD,CACEE,cAzBU,SAACyB,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC7B/C,EAAMgD,YAAYF,EAAOvB,gBACzBwB,EAAU,CACRD,OAAQ,CACNvB,eAAgB,OAsBZE,cAAeA,aCrB3B,GAAewB,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAhBsB,SAACC,GACvB,MAAO,CACLhB,aAAcgB,EAAMC,YACpBhD,UAAW+C,EAAME,KAAKC,UAIC,SAACC,GAC1B,MAAO,CACLP,YAAa,SAAC9C,GACZqD,GAASC,EAAAA,EAAAA,GAAyBtD,SAOtCuD,EAAAA,EAFF,CAGEC","sources":["webpack://eco-social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","webpack://eco-social-network/./src/components/Dialogs/DialogItem/DialogsItems.module.css?93f9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__BGMuL\",\"dialogsItemsWrapper\":\"Dialogs_dialogsItemsWrapper__1z1YX\",\"dialogsItems\":\"Dialogs_dialogsItems__fuaVX\",\"messagesBlock\":\"Dialogs_messagesBlock__AR5Cb\",\"dialog\":\"Dialogs_dialog__YaCvB\",\"messageItem\":\"Dialogs_messageItem__hrm7m\",\"mineMessage\":\"Dialogs_mineMessage__jIqqq\",\"messageItemText\":\"Dialogs_messageItemText__JurHC\",\"newMessage\":\"Dialogs_newMessage__OAP42\",\"error\":\"Dialogs_error__MCd1B\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport cn from \"classnames\";\r\nimport default_avatar_small from \"./../../../assets/images/default_avatar_small.png\";\r\n\r\nconst Message = (props) => {\r\n  let avatar = props.message.isMine\r\n    ? props.authPhoto\r\n      ? props.authPhoto\r\n      : default_avatar_small\r\n    : \"https://cdn-icons-png.flaticon.com/512/147/147142.png\";\r\n  return (\r\n    <div\r\n      className={cn(\r\n        {\r\n          [s.mineMessage]: props.message.isMine === true,\r\n        },\r\n        s.messageItem\r\n      )}\r\n    >\r\n      <img src={avatar} alt=\"\" />\r\n      <div className={s.messageItemText}>{props.message.message}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogsItems_dialog__IiVl2\",\"active\":\"DialogsItems_active__r+1MD\"};","import React from \"react\";\r\nimport s from \"./DialogsItems.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <NavLink\r\n      to={path}\r\n      className={(navData) =>\r\n        navData.isActive ? s.dialog + \" \" + s.active : s.dialog + \" \"\r\n      }\r\n    >\r\n      <img src=\"https://cdn-icons-png.flaticon.com/512/147/147144.png\" alt=\"\" />\r\n      <div>\r\n        {props.name.length > 21\r\n          ? props.name.substring(0, 18) + \"...\"\r\n          : props.name}\r\n      </div>\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { createButton } from \"../common/Button/Button\";\r\n\r\nconst Dialogs = (props) => {\r\n  let dialogsElements = props.messagesPage.dialogs.map((d) => (\r\n    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n  ));\r\n  let messagesElements = props.messagesPage.messages.map((m) => (\r\n    <Message message={m} key={m.id} authPhoto={props.authPhoto} />\r\n  ));\r\n\r\n  let addNewMessage = (values, { resetForm }) => {\r\n    props.sendMessage(values.newMessageBody);\r\n    resetForm({\r\n      values: {\r\n        newMessageBody: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const messageSchema = yup.object().shape({\r\n    newMessageBody: yup\r\n      .string()\r\n      .min(1, \"type text to send message\")\r\n      .max(15, \"caution: your message is too long to be sent\"),\r\n  });\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItemsWrapper}>\r\n        <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      </div>\r\n      <div className={s.messagesBlock}>\r\n        <div className={s.dialog}>{messagesElements}</div>\r\n        <div>\r\n          <FormikDialogs\r\n            addNewMessage={addNewMessage}\r\n            messageSchema={messageSchema}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FormikDialogs = (props) => {\r\n  return (\r\n    <Formik\r\n      onSubmit={props.addNewMessage}\r\n      initialValues={{\r\n        newMessageBody: \"\",\r\n      }}\r\n      validationSchema={props.messageSchema}\r\n    >\r\n      {({ handleSubmit, isValid, dirty, errors }) => (\r\n        <Form onSubmit={handleSubmit} className={s.newMessage}>\r\n          <div>\r\n            <Field\r\n              component=\"textarea\"\r\n              name=\"newMessageBody\"\r\n              placeholder=\"Enter your message\"\r\n            />\r\n            {errors.newMessageBody && (\r\n              <p className={s.error}>{errors.newMessageBody}</p>\r\n            )}\r\n          </div>\r\n          {createButton(null, \"Send message\", \"submit\", {\r\n            disabled: !(isValid && dirty),\r\n          })}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { sendMessageActionCreator } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.dialogsPage,\r\n    authPhoto: state.auth.photo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (message) => {\r\n      dispatch(sendMessageActionCreator(message));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  WithAuthRedirect\r\n)(Dialogs);\r\n"],"names":["props","avatar","message","isMine","authPhoto","default_avatar_small","className","cn","s","src","alt","path","id","to","navData","isActive","name","length","substring","FormikDialogs","onSubmit","addNewMessage","initialValues","newMessageBody","validationSchema","messageSchema","handleSubmit","isValid","dirty","errors","component","placeholder","createButton","disabled","dialogsElements","messagesPage","dialogs","map","d","messagesElements","messages","m","yup","shape","min","max","values","resetForm","sendMessage","compose","connect","state","dialogsPage","auth","photo","dispatch","sendMessageActionCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}